# -*- coding: utf-8 -*-
"""Untitled33.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TWd6T4cHN7DBLxJYs5IUmvCE3lD6AJ3P
"""

# -*- coding: utf-8 -*-
# Simple Loan Prediction App
# Importing requisite libraries
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Page configuration
st.set_page_config(
     page_title='Loan Prediction App',
     page_icon='üçÄ',
     layout='wide',
     initial_sidebar_state='expanded')

# Title of the app
st.title('üçÄ Loan Prediction and Credit Scoring App')

# Load dataset
@st.cache
def load_data():
    url = 'https://raw.githubusercontent.com/dataprofessor/data/master/loan_approval.csv'  # Example dataset
    df = pd.read_csv(url)
    return df

df = load_data()
st.sidebar.subheader('Dataset Overview')
st.write("### Dataset")
st.write(df.head())

# Input widgets
st.sidebar.subheader('Input Features')
loan_amount = st.sidebar.slider('Loan Amount', 1000, 50000, 15000)
income = st.sidebar.slider('Income', 1000, 100000, 50000)
credit_score = st.sidebar.slider('Credit Score', 300, 850, 650)
employment_years = st.sidebar.slider('Years of Employment', 0, 40, 5)

# Feature and target separation
X = df.drop('Approval', axis=1)
y = df['Approval']

# Data splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Models
models = {
    "Support Vector Machine": SVC(kernel='linear', random_state=42),
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5),
    "Logistic Regression": LogisticRegression(random_state=42)
}

# Train and predict
predictions = {}
accuracies = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    predictions[name] = y_pred
    accuracies[name] = accuracy_score(y_test, y_pred)

# Input feature dataframe for prediction
input_features = pd.DataFrame([[loan_amount, income, credit_score, employment_years]],
                               columns=['LoanAmount', 'Income', 'CreditScore', 'EmploymentYears'])

st.sidebar.subheader('Select Model')
selected_model = st.sidebar.selectbox("Choose Model for Prediction", list(models.keys()))

# Predict using the selected model
selected_model_instance = models[selected_model]
predicted = selected_model_instance.predict(input_features)[0]

# Display input features
st.subheader('Input Features')
st.write(input_features)

# Display prediction
st.subheader('Prediction Output')
st.metric('Loan Approval Prediction', 'Approved' if predicted == 1 else 'Rejected')

# Display accuracy
st.write("### Model Accuracies")
accuracy_df = pd.DataFrame.from_dict(accuracies, orient='index', columns=['Accuracy'])
st.write(accuracy_df)

# Confusion matrix and classification report
st.subheader(f"Performance of {selected_model}")
fig, ax = plt.subplots()
display = ConfusionMatrixDisplay.from_estimator(selected_model_instance, X_test, y_test, ax=ax, cmap='viridis')
st.pyplot(fig)

report = classification_report(y_test, predictions[selected_model], output_dict=True)
st.write(pd.DataFrame(report).transpose())

# Visualizations
st.subheader('Loan Approval Distribution')
st.bar_chart(df['Approval'].value_counts())